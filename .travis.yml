# Copyright Louis Dionne 2015, Barrett Adair 2015-2017
# Modified Work Copyright Florian Richoux 2017

language: c++
compiler: clang
os: linux
sudo: false

# Do not build branches of the form "pr/*". By prefixing pull requests coming
# from branches inside the repository with pr/, this avoids building both the
# branch push _and_ the pull request.
branches:
  except: /pr\/.*/

env:
  global:
    # GitHub token for pushing the documentation, logging in with the
    # Travis command line utility and so on. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: ""

  # Workaround for https://github.com/travis-ci/travis-ci/issues/4681
  matrix:
    - TRAVIS_EMPTY_JOB_WORKAROUND=true

addons:
  apt:
    packages:
      - g++-6
    sources: &sources
      - ubuntu-toolchain-r-test

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps

matrix:
  exclude::wq:w:
    - env: TRAVIS_EMPTY_JOB_WORKAROUND=true

  include:

    ##########################################################################
    # Build with the main configuration on all the supported compilers
    ##########################################################################
    # Clang 3.5
    - env: UNIT_TESTS=true CPP=11 LLVM_VERSION=3.5.2 BOOST_VERSION=default
    - env: UNIT_TESTS=true CPP=14 LLVM_VERSION=3.5.2 BOOST_VERSION=default

    # Clang 3.6
    - env: UNIT_TESTS=true CPP=11 LLVM_VERSION=3.6.2 BOOST_VERSION=default
    - env: UNIT_TESTS=true CPP=14 LLVM_VERSION=3.6.2 BOOST_VERSION=default

    # Clang 3.7
    - env: UNIT_TESTS=true CPP=11 LLVM_VERSION=3.7.1 BOOST_VERSION=default
    - env: UNIT_TESTS=true CPP=14 LLVM_VERSION=3.7.1 BOOST_VERSION=default

    # Clang 3.8		 
    - env: UNIT_TESTS=true CPP=11 LLVM_VERSION=3.8.0 BOOST_VERSION=default
    - env: UNIT_TESTS=true CPP=14 LLVM_VERSION=3.8.0 BOOST_VERSION=default
    - env: UNIT_TESTS=true CPP=1z LLVM_VERSION=3.8.0 BOOST_VERSION=default

    # Xcode 6.4
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode6.4

    # Xcode 7
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode7

    # Xcode 7.1
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode7.1

    # Xcode 7.2
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode7.2


    # Xcode 7.3
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode7.3

    # Xcode 8
    - os: osx
      env: UNIT_TESTS=true BOOST_VERSION=default
      osx_image: xcode8

    ##########################################################################
    # Build with variations in the configuration
    ##########################################################################

    # Build with libstdc++ instead of libc++
    - env: UNIT_TESTS=true LLVM_VERSION=default STDLIB=libstdc++ BOOST_VERSION=default

    # GCC 7
    #- env: UNIT_TESTS=true CPP=17 GCC_VERSION=7 STDLIB=libstdc++ BOOST_VERSION=default
    #  os: linux
    #  compiler: gcc
    #  addons:
    #    apt:
    #      packages: ["g++-7"]
    #      sources: *sources

    # GCC 6 with 17
    - env: UNIT_TESTS=true CPP=17 GCC_VERSION=6 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: gcc
      addons:
        apt:
          packages: ["g++-6"]
          sources: *sources

    # GCC 6 with 14
    - env: UNIT_TESTS=true CPP=14 GCC_VERSION=6 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: gcc
      addons:
        apt:
          packages: ["g++-6"]
          sources: *sources

    # GCC 5.2 with 14
    - env: UNIT_TESTS=true CPP=14 GCC_VERSION=5 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-5"]
          sources: *sources

    # GCC 5.2 with 11
    - env: UNIT_TESTS=true CPP=11 GCC_VERSION=5 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-5"]
          sources: *sources

    # GCC 4.9 with 14
    - env: UNIT_TESTS=true CPP=11 GCC_VERSION=4.9 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-4.9"]
          sources: *sources

    # GCC 4.9 with 11
    - env: UNIT_TESTS=true CPP=11 GCC_VERSION=4.9 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-4.9"]
          sources: *sources

    # GCC 4.8 with 1y
    - env: UNIT_TESTS=true CPP=1y GCC_VERSION=4.8 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-4.8"]
          sources: *sources

    # GCC 4.8 with 0x
    - env: UNIT_TESTS=true CPP=0x GCC_VERSION=4.8 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-4.8"]
          sources: *sources

    # GCC 4.7 with 1y
    - env: UNIT_TESTS=true CPP=1y GCC_VERSION=4.7 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-4.7"]
          sources: *sources

    # GCC 4.7 with 0x
    - env: UNIT_TESTS=true CPP=0x GCC_VERSION=4.7 STDLIB=libstdc++ BOOST_VERSION=default
      os: linux
      compiler: g++
      addons:
        apt:
          packages: ["g++-4.7"]
          sources: *sources

before_install:

  - if [ -z "$CPP" ]; then export CPP="14"; fi

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

 ############################################################################
  # Setup default versions
  ############################################################################
  - if [[ "${LLVM_VERSION}" == "default" ]]; then LLVM_VERSION=3.8.0; fi
  - if [[ "${BOOST_VERSION}" == "default" ]]; then BOOST_VERSION=1.64.0; fi


  ############################################################################
  # Install Boost headers
  ############################################################################
  
  - if [[ -d ${DEPS_DIR}/boost ]]; then CMAKE_OPTIONS+=" -DBOOST_ROOT=${DEPS_DIR}/boost"; fi
  - if [[ "${BOOST_VERSION}" == "1.64.0" ]]; then BOOST_URL="http://sourceforge.net/projects/boost/files/boost/1.64.0/boost_1_64_0.tar.gz"; fi
  - if [[ "${BOOST_URL}" != "" ]]; then mkdir -p boost && travis_retry wget --quiet -O - ${BOOST_URL} | tar --strip-components=1 -xz -C boost; fi

  - |
    if [[ "${BOOST_VERSION}" == "trunk" ]]; then
      BOOST_URL="http://github.com/boostorg/boost.git"
      travis_retry git clone --depth 1 --recursive --quiet ${BOOST_URL}
      (cd boost && ./bootstrap.sh && ./b2 headers)
    fi
  - if [[ -d ${DEPS_DIR}/boost ]]; then CMAKE_OPTIONS+=" -DBOOST_ROOT=${DEPS_DIR}/boost"; fi
  
  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
      mkdir -p cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew unlink cmake
      brew install cmake
    fi
    
  ############################################################################
  # Install Boost.Build
  ############################################################################
  - |
    (cd boost/tools/build && ./bootstrap.sh && ./b2 install --prefix=${DEPS_DIR}/b2)
    export PATH=${DEPS_DIR}/b2/bin:${PATH}
  ############################################################################
  # Install Clang
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" ]]; then
      CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
      mkdir clang && travis_retry wget --quiet -O - ${CLANG_URL} | tar --strip-components=1 -xJ -C clang
      export PATH="${DEPS_DIR}/clang/bin:${PATH}"
    fi
  ############################################################################
  # Install libc++ and libc++abi (on Linux only; Xcode uses libc++ by default)
  ############################################################################
  - |
    if [[ "${LLVM_VERSION}" != "" && "${STDLIB}" != "libstdc++" ]]; then
      if [[ "${LLVM_VERSION}" != "trunk" ]]; then
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        TAR_FLAGS="-xJ"
      else
        LLVM_URL="https://github.com/llvm-mirror/llvm/archive/master.tar.gz"
        LIBCXX_URL="https://github.com/llvm-mirror/libcxx/archive/master.tar.gz"
        LIBCXXABI_URL="https://github.com/llvm-mirror/libcxxabi/archive/master.tar.gz"
        TAR_FLAGS="-xz"
      fi
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm
      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxx
      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install -DCMAKE_CXX_COMPILER=clang++)
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi
before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"

  - $CXX --version
  - git clone https://github.com/google/googletest.git

  ############################################################################
  # Build Google Test
  ############################################################################
  - git clone https://github.com/google/googletest.git

  # install GTest
  - cd googletest/googletest
  - mkdir build ; cd build
  - cmake ..
  - make
  - cp -r ../include/* ../../../test/include/
  - cp libg*a ../../../test/lib/

  # install GMock
  - cd ../../googlemock
  - mkdir build ; cd build
  - cmake ..
  - make
  - cp -r ../include/* ../../../test/include/
  - cp libg*a ../../../test/lib/
  - cd ../../..  
  
  ############################################################################
  # Go back to the root of the project and setup the build directory
  ############################################################################
  - cd ${TRAVIS_BUILD_DIR}
  - if [[ "${GCC_VERSION}" != "" ]]; then export CXX=g++-$GCC_VERSION; fi
  - (mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=${CXX} -DBUILD_CXX_STD=$CPP ${CMAKE_OPTIONS} )
  - sudo make install
  - cd ${TRAVIS_BUILD_DIR}
  # make and run tests
  # - make test CXX=g++-5
  - make test
  
script:

############################################################################
# Build and run the unit tests and examples.
############################################################################

  - cd ${TRAVIS_BUILD_DIR}
  - cd test/bin && for i in $(ls); do ./$i; done

  # - valgrind --leak-check=full --show-reachable=yes bin/ghost --auto
  # - valgrind --tool=cachegrind bin/ghost --auto
  